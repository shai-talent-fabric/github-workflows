on:
  workflow_call:
    inputs:
      tag_version:
        required: false
        type: boolean
        default: false
      deploy:
        required: false
        type: boolean
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GH_PAT:
        required: true

jobs:
  build-workflow:
    runs-on: ubuntu-latest
    outputs:
      git_version: ${{ steps.gitversion.outputs.fullSemVer }}
    steps:
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.6.7'
           
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set envs
        id: set-envs
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
          BRANCH=${GITHUB_REF##*/}
          git_version=${{ steps.gitversion.outputs.fullSemVer }}
          echo "git_repo_name=${REPO_NAME}" | tee -a $GITHUB_ENV
          echo "git_version=${git_version}" | tee -a $GITHUB_ENV
          IMAGE_NAME=737852819915.dkr.ecr.us-east-1.amazonaws.com/talentfabric/${REPO_NAME}:${git_version}
          echo "docker_image_name=${IMAGE_NAME}" | tee -a $GITHUB_ENV
          echo "tag_version=${{inputs.tag_version}}" | tee -a $GITHUB_ENV

      - name: Docker build
        run: |
          docker build -t ${{env.docker_image_name}} .

      - name: Docker push
        if: ${{github.event.inputs.tag_version}} == 'true'
        run: |
              docker push ${{env.docker_image_name}}

  tag-version:
    if: ${{inputs.tag_version}}
    needs: build-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Git tag
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git tag "${{ needs.build-workflow.outputs.git_version }}" || true
          git push --tags || true

  deploy-dev:
    if: ${{inputs.deploy}}
    needs: ["build-workflow", "tag-version"]
    runs-on: ubuntu-latest
    steps:
      - name: Set envs
        id: set-envs
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
          git_version=${{ needs.build-workflow.outputs.git_version }}
          echo "git_repo_name=${REPO_NAME}" | tee -a $GITHUB_ENV
          echo "git_version=${git_version}" | tee -a $GITHUB_ENV
          echo "deploy=${{inputs.deploy}}" | tee -a $GITHUB_ENV

      - name: Checkout deployments-scripts repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
          repository: TalentFabric/deployments-scripts

      - name: Deploy to dev
        env:
          TAG: ${{env.git_version}}
          REPO_NAME: ${{env.git_repo_name}}
        run: |
              export TAG_FILE=$(find ./resources/services -type d -name "${REPO_NAME}" )/dev/ovveride.yaml
              export TAG_FIND=$(grep tag $TAG_FILE | cut -d: -f2 | tr -d " ")
              if [[ ! -z "${TAG_FIND}" ]]; then 
                sed -i "s/${TAG_FIND}/${TAG}/" $TAG_FILE
                git config user.name "GitHub Actions Bot"
                git config user.email "<>"
                git add $TAG_FILE || true
                git commit -m "bot ${REPO_NAME} ${TAG_FILE} deploy to dev" || true
                git push origin master || true
              else
                echo "could not deploy" && exit 1
              fi
